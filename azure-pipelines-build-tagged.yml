# Pipeline for building artifacts for tagged versions
# Tags that should match:
#   1.2.3
#   v4.5.6
#   v7.8.9-alpha1
#
# Tags that should not match:
#   1.2
#   HappyFunThing
#
trigger:
  tags:
    include:
    - '*.*.*'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
#  0) parse the $(Build.SourceBranchName) which will be the tag name string
#  1) split into majorVersion, minorVersion, patchVersion, optional suffixVersion (eg. '-alpha', '.beta1')
- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: ./ExtractVersionComponents.ps1
    arguments: "$(Build.SourceBranchName)"
    pwsh: true
  displayName: 'Extract version number details'

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet'

- task: NuGetCommand@2
  displayName: 'NuGet Restore'
  inputs:
    restoreSolution: '$(solution)'

# TODO - take the tag that triggered this build and:
#  2) run a script to update any version resource files to have the correct version info
#  3) assign the appropriate NuGet env var / variables with the correct version info
- task: Assembly-Info-NetCore@2
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: '**/*Hello.csproj'
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    GeneratePackageOnBuild: true
    PackageId: 'Tt1.Hello'
    Authors: 'Tyler Test1'
    Company: 'Tyler test1'
    Description: 'Testing the end-to-end setup for OSS nuget workflow.'
    Copyright: 'Copyright (c) 2019 Tyler Test1'
    PackageProjectUrl: 'https://github.com/tyler-test1/Tt1.Hello'
    RepositoryUrl: 'https://github.com/tyler-test1/Tt1.Hello'
    PackageTags: 'sample, test'
    VersionNumber: '$(majorVersion).$(minorVersion).$(patchVersion).$(suffixVersion)'
    FileVersionNumber: '$(majorVersion).$(minorVersion).$(patchVersion).$(suffixVersion)'
    InformationalVersion: '$(majorVersion).$(minorVersion).$(patchVersion)-$(suffixVersion)'
    PackageVersion: '$(majorVersion).$(minorVersion).$(patchVersion)-$(suffixVersion)'

- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'Test solution'
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**\*.nupkg'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()
